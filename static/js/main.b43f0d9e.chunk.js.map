{"version":3,"sources":["Question.js","App.js","index.js"],"names":["props","ques","ind","checked","handleChange","question","options","map","opt","i","Fragment","key","type","value","name","id","onChange","htmlFor","style","height","width","backgroundColor","marginTop","App","questions","answer","useState","qn","setQn","showNext","setShowNext","changed","setChanged","Array","length","fill","setChecked","Question","checkedValues","document","querySelector","onClick","color","correntAnswers","forEach","item","getCorrectAnswer","percent","calcColor","render","getElementById"],"mappings":"2KAEe,WAACA,GAAW,IACjBC,EAAqCD,EAArCC,KAAMC,EAA+BF,EAA/BE,IAAKC,EAA0BH,EAA1BG,QAASC,EAAiBJ,EAAjBI,aAE1B,OACI,oCACI,4BAAKH,EAAKI,UACV,8BAEQJ,EAAKK,QAAQC,KAAI,SAACC,EAAKC,GACnB,OACI,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACjB,2BAAOG,KAAK,QAAQC,MAAOL,EAAKM,KAAI,kBAAaZ,GAAOa,GAAE,aAAQN,EAAI,EAAZ,YAAiBP,EAAM,GAAKC,QAASA,EAAQD,KAASM,EAAKQ,SAAUZ,IAC/H,2BAAOa,QAAO,aAAQR,EAAI,EAAZ,YAAiBP,EAAM,IAAMM,GAC3C,oCCb1BU,EAAQ,CAAEC,OAAQ,GAAIC,MAAO,IAAKC,gBAAiB,UAAWC,UAAW,IAwGhEC,EAtGH,SAACvB,GACH,IAAAwB,EAAY,CACV,CACInB,SAAU,oBACVC,QAAS,CAAC,eAAgB,kBAAmB,iBAAkB,cAC/DmB,OAAQ,kBAEZ,CACIpB,SAAU,yBACVC,QAAS,CAAC,SAAU,OAAQ,UAAW,YACvCmB,OAAQ,YAEZ,CACIpB,SAAU,wCACVC,QAAS,CAAC,eAAgB,kBAAmB,iBAAkB,cAC/DmB,OAAQ,oBAdd,EAkBYC,mBAAS,GAlBrB,mBAkBDC,EAlBC,KAkBGC,EAlBH,OAmBwBF,oBAAS,GAnBjC,mBAmBDG,EAnBC,KAmBSC,EAnBT,OAoBsBJ,mBAAS,GApB/B,mBAoBDK,EApBC,KAoBQC,EApBR,OAqBsBN,mBAAS,IAAIO,MAAMT,EAAUU,QAAQC,KAAK,OArBhE,mBAqBDhC,EArBC,KAqBQiC,EArBR,KA6DN,OACI,oCACI,gDACA,6CAEIT,EAAKH,EAAUU,OACX,oCACI,kBAACG,EAAD,CAAUpC,KAAMuB,EAAUG,GAAKzB,IAAKyB,EAAIvB,aAzCzC,WACX,IAAIkC,EAAgBnC,EAChBmC,EAAcX,GAAMY,SAASC,cAAT,8BAA8Cb,EAA9C,eAA8Dd,MACtFmB,EAAWD,EAAU,GACrBK,EAAWE,GACXR,GAAY,IAoCoE3B,QAASA,IAEzEwB,EAAK,EAAI,4BAAQT,MAAOA,EAAOuB,QApCtC,WACTb,EAAMD,EAAK,KAmCc,UAA6D,GAItEE,GAA4B,OAAhB1B,EAAQwB,GAAe,4BAAQT,MAAOA,EAAOuB,QAnDhE,WACTX,GAAY,GACZF,EAAMD,EAAK,KAiDoFA,IAAOH,EAAUU,OAAS,EAAI,SAAW,QAAmB,IAKnJ,oCACI,+DACA,0CAnCJ,WACR,IAEIQ,EAFAC,EAVW,WACf,IAAIA,EAAiB,EAMrB,OALAxC,EAAQyC,SAAQ,SAACC,EAAMpC,GACfoC,IAASrB,EAAUf,GAAGgB,QACtBkB,OAGAA,EAGaG,GACjBC,EAAUJ,EAAiBnB,EAAUU,OAUzC,OANIQ,EADAK,EAAU,GACF,MACDA,EAAU,GACT,SAEA,QAEL,0BAAM7B,MAAO,CAAEwB,MAAOA,IAAUC,GAuBXK,GAAhB,WAAqCxB,EAAUU,QAC/C,6FAIIV,EAAUjB,KAAI,SAACN,EAAMQ,GACjB,OACI,kBAAC,IAAMC,SAAP,CAAgBC,IAAKF,GACjB,4BAAKR,EAAKI,UACV,gDAAsBJ,EAAKwB,eC3FnEwB,iBACI,kBAAC,EAAD,MACAV,SAASW,eAAe,W","file":"static/js/main.b43f0d9e.chunk.js","sourcesContent":["import React from 'react'\n\nexport default (props) => {\n    let { ques, ind, checked, handleChange } = props\n\n    return (\n        <>\n            <h3>{ques.question}</h3>\n            <form>\n                {\n                    ques.options.map((opt, i) => {\n                        return (\n                            <React.Fragment key={i}>\n                                <input type=\"radio\" value={opt} name={`question${ind}`} id={`ans${i + 1}q${ind + 1}`} checked={checked[ind] === opt} onChange={handleChange}/>\n                                <label htmlFor={`ans${i + 1}q${ind + 1}`}>{opt}</label>\n                                <br />\n                            </React.Fragment>\n                        )\n                    })\n                }\n            </form>\n        </>\n    )\n}\n","import React, { useState } from 'react'\nimport Question from './Question'\nconst style = { height: 30, width: 100, backgroundColor: '#33ffCC', marginTop: 10 }\n\nconst App = (props) => {\n    const questions = [\n            {\n                question: \"Who invented Unix\",\n                options: [\"Issac Newton\", \"Charles Babbage\", \"Dennis Ritiche\", \"Steve Jobs\"],\n                answer: \"Dennis Ritiche\"\n            },\n            {\n                question: \"Which is not a browser\",\n                options: [\"Chrome\", \"Edge\", \"Firefox\", \"Facebook\"],\n                answer: \"Facebook\"\n            },\n            {\n                question: \"Who is the father of computer science\",\n                options: [\"Issac Newton\", \"Charles Babbage\", \"Dennis Ritiche\", \"Steve Jobs\"],\n                answer: \"Charles Babbage\"\n            },\n        ],\n        // Sates\n        [qn, setQn] = useState(0),\n        [showNext, setShowNext] = useState(false),\n        [changed, setChanged] = useState(0),\n        [checked, setChecked] = useState(new Array(questions.length).fill(null)),\n        // Internal Functions\n        handleNext = () => {\n            setShowNext(false)\n            setQn(qn + 1)\n        },\n        handleChange = () => {\n            let checkedValues = checked\n                checkedValues[qn] = document.querySelector(`input[name=\"question${qn}\"]:checked`).value\n            setChanged(changed + 1)\n            setChecked(checkedValues)\n            setShowNext(true)\n        },\n        handlePrev = () => {\n            setQn(qn - 1)\n        },\n        getCorrectAnswer = () => {\n            let correntAnswers = 0;\n            checked.forEach((item, i) => {\n                if (item === questions[i].answer) {\n                    correntAnswers++\n                }\n            })\n            return (correntAnswers)\n        },\n        calcColor = () => {\n            let correntAnswers = getCorrectAnswer(),\n                percent = correntAnswers / questions.length,\n                color\n            \n            if (percent < 0.4) {\n                color = 'red'\n            } else if (percent < 0.7) {\n                color = 'yellow'\n            } else {\n                color = 'green'\n            }\n            return(<span style={{ color: color }}>{correntAnswers}</span>)\n        }\n\n    return (\n        <>\n            <h1>This is quiz app</h1>\n            <h2>Question List</h2>\n            {\n                qn < questions.length ?\n                    <>\n                        <Question ques={questions[qn]} ind={qn} handleChange={handleChange} checked={checked} />\n                        {\n                            qn > 0 ? <button style={style} onClick={handlePrev}> Prev </button> : ''\n\n                        }\n                        {\n                            showNext || checked[qn] !== null ? <button style={style} onClick={handleNext}>{qn === questions.length - 1 ? \"Finish\" : \"Next\"}</button> : ''\n                        }\n\n                    </>\n                :\n                    <>\n                        <h1>You have completed the question</h1>\n                        <h2>You scored {calcColor()} out of {questions.length}</h2>\n                        <div>\n                            ============================================================\n                        </div>\n                        {\n                            questions.map((ques, i) => {\n                                return (\n                                    <React.Fragment key={i}>\n                                        <h2>{ques.question}</h2>\n                                        <h3>Correct Answer : {ques.answer}</h3>\n                                    </React.Fragment>\n                                )\n                            })\n                        }\n                    </>\n            }\n        </>\n    )\n}\n\nexport default App","import React from 'react'\nimport { render } from 'react-dom'\nimport App from './App'\n\nrender(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}